
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ScannerBuffer;
import java.util.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\042\002\000\002\004\007\000\002\005\002\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\010\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\043\002" +
    "\000\002\013\006\000\002\044\002\000\002\045\002\000" +
    "\002\013\010\000\002\014\003\000\002\014\005\000\002" +
    "\015\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\005\000" +
    "\002\021\006\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\022\003\000\002\023\003\000\002\024" +
    "\003\000\002\024\004\000\002\025\004\000\002\046\002" +
    "\000\002\025\007\000\002\047\002\000\002\026\007\000" +
    "\002\050\002\000\002\051\002\000\002\027\011\000\002" +
    "\052\002\000\002\053\002\000\002\027\012\000\002\054" +
    "\002\000\002\055\002\000\002\027\015\000\002\056\002" +
    "\000\002\030\006\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\005\000\002\033\005\000\002\034\003\000\002\034\005" +
    "\000\002\034\005\000\002\035\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\036\003\000\002" +
    "\036\004\000\002\037\003\000\002\037\006\000\002\037" +
    "\005\000\002\040\003\000\002\040\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\015\007\016\013\043\005\001\002\000" +
    "\012\002\225\015\007\016\013\043\005\001\002\000\004" +
    "\004\ufff6\001\002\000\012\002\000\015\000\016\000\043" +
    "\000\001\002\000\006\016\013\043\005\001\002\000\004" +
    "\004\017\001\002\000\012\002\ufffc\015\ufffc\016\ufffc\043" +
    "\ufffc\001\002\000\012\002\ufffe\015\ufffe\016\ufffe\043\ufffe" +
    "\001\002\000\004\004\ufff7\001\002\000\006\025\ufff5\030" +
    "\ufff5\001\002\000\010\025\ufff0\026\ufff9\030\ufff0\001\002" +
    "\000\006\025\035\030\034\001\002\000\010\025\ufff1\030" +
    "\ufff1\032\020\001\002\000\010\016\uffed\033\uffef\043\uffed" +
    "\001\002\000\006\016\013\043\005\001\002\000\004\033" +
    "\023\001\002\000\010\025\uffee\026\uffee\030\uffee\001\002" +
    "\000\004\004\033\001\002\000\006\030\uffea\033\uffea\001" +
    "\002\000\006\030\030\033\uffec\001\002\000\004\033\032" +
    "\001\002\000\006\016\013\043\005\001\002\000\006\030" +
    "\uffe9\033\uffe9\001\002\000\010\025\uffeb\026\uffeb\030\uffeb" +
    "\001\002\000\006\030\uffe8\033\uffe8\001\002\000\004\004" +
    "\017\001\002\000\044\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\032\ufff8\034\ufff8\043\ufff8" +
    "\001\002\000\006\025\ufff4\030\ufff4\001\002\000\006\025" +
    "\ufff0\030\ufff0\001\002\000\004\026\ufffb\001\002\000\004" +
    "\026\043\001\002\000\040\004\051\005\076\006\075\016" +
    "\013\017\062\021\055\022\065\023\101\024\057\025\054" +
    "\026\043\027\074\032\103\034\072\043\005\001\002\000" +
    "\040\004\uffda\005\uffda\006\uffda\016\uffda\017\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\032" +
    "\uffda\034\uffda\043\uffda\001\002\000\012\002\ufffa\015\ufffa" +
    "\016\ufffa\043\ufffa\001\002\000\036\004\uffe3\005\uffe3\006" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\032\uffe3\034\uffe3\001\002\000" +
    "\040\004\ufff3\005\ufff3\006\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\032" +
    "\ufff3\034\ufff3\043\ufff3\001\002\000\036\004\uffe2\005\uffe2" +
    "\006\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\032\uffe2\034\uffe2\001\002" +
    "\000\042\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\025\uffb3\030\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\001\002\000\026\007" +
    "\uffae\010\uffae\025\uffae\031\160\032\125\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\001\002\000\036\004\uffe6\005" +
    "\uffe6\006\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\032\uffe6\034\uffe6\001" +
    "\002\000\004\004\017\001\002\000\036\004\uffe7\005\uffe7" +
    "\006\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\034\uffe7\001\002" +
    "\000\004\032\215\001\002\000\042\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\025\uffb5\030\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\001\002\000\014\004\104\005\076\006\075\032\103" +
    "\034\072\001\002\000\034\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\025\uffbf\030\uffbf\033\uffbf\034\113" +
    "\035\112\041\uffbf\042\uffbf\001\002\000\042\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\025\uffb9\030\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\001\002\000\004\032\206\001\002\000\032" +
    "\004\051\005\076\006\075\017\062\021\055\022\065\023" +
    "\101\024\057\025\054\026\043\032\103\034\072\001\002" +
    "\000\042\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\025\uffbc\030\uffbc\033\uffbc\034\uffbc\035\uffbc\036\117" +
    "\037\116\040\115\041\uffbc\042\uffbc\001\002\000\032\004" +
    "\uffce\005\uffce\006\uffce\017\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\032\uffce\034\uffce\001\002\000" +
    "\010\007\110\010\106\025\172\001\002\000\040\004\051" +
    "\005\076\006\075\016\013\017\062\021\055\022\065\023" +
    "\101\024\057\025\054\026\043\027\074\032\103\034\072" +
    "\043\005\001\002\000\036\004\uffe5\005\uffe5\006\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\034\uffe5\001\002\000\004\025" +
    "\165\001\002\000\014\004\104\005\076\006\075\032\103" +
    "\034\072\001\002\000\034\004\051\005\076\006\075\017" +
    "\062\021\055\022\065\023\101\024\057\025\054\026\043" +
    "\027\074\032\103\034\072\001\002\000\046\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\032\uffd9\034\uffd9\043\uffd9\001\002\000\042\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\025\uffac\030" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\uffac\001\002\000\042\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\025\uffad\030\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\001\002\000\034\004\uffd8\005\uffd8\006\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\032\uffd8\034\uffd8\001\002\000\046\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\032\uffdb\034\uffdb\043\uffdb\001\002\000\004\032\134\001" +
    "\002\000\036\004\uffe4\005\uffe4\006\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\032\uffe4\034\uffe4\001\002\000\014\004\104\005\076" +
    "\006\075\032\103\034\072\001\002\000\044\007\uffae\010" +
    "\uffae\011\uffae\012\uffae\013\uffae\014\uffae\025\uffae\030\uffae" +
    "\032\125\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\001\002\000\010\007\110\010\106" +
    "\033\107\001\002\000\014\004\104\005\076\006\075\032" +
    "\103\034\072\001\002\000\042\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\025\uffab\030\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\001\002\000\014\004\104\005\076\006\075\032\103\034" +
    "\072\001\002\000\034\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\025\uffbe\030\uffbe\033\uffbe\034\113\035" +
    "\112\041\uffbe\042\uffbe\001\002\000\014\004\104\005\076" +
    "\006\075\032\103\034\072\001\002\000\014\004\104\005" +
    "\076\006\075\032\103\034\072\001\002\000\042\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\025\uffba\030" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\117\037\116\040\115" +
    "\041\uffba\042\uffba\001\002\000\014\004\104\005\076\006" +
    "\075\032\103\034\072\001\002\000\014\004\104\005\076" +
    "\006\075\032\103\034\072\001\002\000\014\004\104\005" +
    "\076\006\075\032\103\034\072\001\002\000\042\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\025\uffb8\030" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\001\002\000\042\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\025\uffb7\030\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\001\002\000\042\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\025\uffb6\030\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\001\002" +
    "\000\042\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\025\uffbb\030\uffbb\033\uffbb\034\uffbb\035\uffbb\036\117" +
    "\037\116\040\115\041\uffbb\042\uffbb\001\002\000\034\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\025\uffbd" +
    "\030\uffbd\033\uffbd\034\113\035\112\041\uffbd\042\uffbd\001" +
    "\002\000\016\004\104\005\076\006\075\032\103\033\127" +
    "\034\072\001\002\000\012\007\110\010\106\030\uffb0\033" +
    "\uffb0\001\002\000\042\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\025\uffb1\030\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\001\002" +
    "\000\006\030\131\033\132\001\002\000\014\004\104\005" +
    "\076\006\075\032\103\034\072\001\002\000\042\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\025\uffb2\030" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\001\002\000\012\007\110\010\106\030" +
    "\uffaf\033\uffaf\001\002\000\004\004\135\001\002\000\004" +
    "\031\160\001\002\000\004\025\137\001\002\000\014\004" +
    "\uffcb\005\uffcb\006\uffcb\032\uffcb\034\uffcb\001\002\000\014" +
    "\004\104\005\076\006\075\032\103\034\072\001\002\000" +
    "\004\025\153\001\002\000\022\007\110\010\106\011\147" +
    "\012\151\013\145\014\150\041\143\042\144\001\002\000" +
    "\014\004\uffc1\005\uffc1\006\uffc1\032\uffc1\034\uffc1\001\002" +
    "\000\014\004\uffc0\005\uffc0\006\uffc0\032\uffc0\034\uffc0\001" +
    "\002\000\014\004\uffc5\005\uffc5\006\uffc5\032\uffc5\034\uffc5" +
    "\001\002\000\014\004\104\005\076\006\075\032\103\034" +
    "\072\001\002\000\014\004\uffc3\005\uffc3\006\uffc3\032\uffc3" +
    "\034\uffc3\001\002\000\014\004\uffc4\005\uffc4\006\uffc4\032" +
    "\uffc4\034\uffc4\001\002\000\014\004\uffc2\005\uffc2\006\uffc2" +
    "\032\uffc2\034\uffc2\001\002\000\012\007\110\010\106\025" +
    "\uffc6\033\uffc6\001\002\000\004\004\uffca\001\002\000\004" +
    "\004\135\001\002\000\004\033\156\001\002\000\032\004" +
    "\051\005\076\006\075\017\062\021\055\022\065\023\101" +
    "\024\057\025\054\026\043\032\103\034\072\001\002\000" +
    "\036\004\uffc9\005\uffc9\006\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\032" +
    "\uffc9\034\uffc9\001\002\000\014\004\104\005\076\006\075" +
    "\032\103\034\072\001\002\000\012\007\110\010\106\025" +
    "\uffdf\033\uffdf\001\002\000\034\004\uffd7\005\uffd7\006\uffd7" +
    "\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\032\uffd7\034\uffd7\001\002\000\046\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\032\uffdc\034\uffdc\043\uffdc\001\002\000\042\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\025\uffb4" +
    "\030\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\001\002\000\036\004\uffe0\005\uffe0" +
    "\006\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\034\uffe0\001\002" +
    "\000\040\004\ufff2\005\ufff2\006\ufff2\016\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\032\ufff2\034\ufff2\043\ufff2\001\002\000\034\004\051\005" +
    "\076\006\075\017\062\021\055\022\065\023\101\024\057" +
    "\025\054\026\043\027\074\032\103\034\072\001\002\000" +
    "\046\002\uffdd\004\uffdd\005\uffdd\006\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\032\uffdd\034\uffdd\043\uffdd\001\002" +
    "\000\046\002\uffde\004\uffde\005\uffde\006\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\032\uffde\034\uffde\043\uffde\001" +
    "\002\000\036\004\uffe1\005\uffe1\006\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\032\uffe1\034\uffe1\001\002\000\032\004\051\005\076" +
    "\006\075\017\062\021\055\022\065\023\101\024\057\025" +
    "\054\026\043\032\103\034\072\001\002\000\004\021\175" +
    "\001\002\000\004\032\176\001\002\000\014\004\104\005" +
    "\076\006\075\032\103\034\072\001\002\000\004\033\uffcd" +
    "\001\002\000\004\033\201\001\002\000\036\004\uffcc\005" +
    "\uffcc\006\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc\034\uffcc\001" +
    "\002\000\036\004\uffd6\005\uffd6\006\uffd6\017\uffd6\020\203" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\032\uffd6\034\uffd6\001\002\000\032\004\uffd5\005\uffd5" +
    "\006\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\032\uffd5\034\uffd5\001\002\000\032\004\051" +
    "\005\076\006\075\017\062\021\055\022\065\023\101\024" +
    "\057\025\054\026\043\032\103\034\072\001\002\000\036" +
    "\004\uffd4\005\uffd4\006\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4" +
    "\034\uffd4\001\002\000\014\004\104\005\076\006\075\032" +
    "\103\034\072\001\002\000\004\033\uffd3\001\002\000\004" +
    "\033\211\001\002\000\032\004\uffd2\005\uffd2\006\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\032\uffd2\034\uffd2\001\002\000\010\007\110\010\106\025" +
    "\uffc8\001\002\000\004\025\214\001\002\000\036\004\uffc7" +
    "\005\uffc7\006\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7\034\uffc7" +
    "\001\002\000\014\004\uffd1\005\uffd1\006\uffd1\032\uffd1\034" +
    "\uffd1\001\002\000\014\004\104\005\076\006\075\032\103" +
    "\034\072\001\002\000\004\033\220\001\002\000\032\004" +
    "\uffd0\005\uffd0\006\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\032\uffd0\034\uffd0\001\002\000" +
    "\032\004\051\005\076\006\075\017\062\021\055\022\065" +
    "\023\101\024\057\025\054\026\043\032\103\034\072\001" +
    "\002\000\036\004\uffcf\005\uffcf\006\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\032\uffcf\034\uffcf\001\002\000\012\002\ufffd\015\ufffd" +
    "\016\ufffd\043\ufffd\001\002\000\012\002\uffff\015\uffff\016" +
    "\uffff\043\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\014\002\003\003\005\004\010\006\011\007" +
    "\007\001\001\000\012\003\223\004\010\006\011\007\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\222\007\052\001\001\000\010\010\015\012\013\013\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\021\044\020\001" +
    "\001\000\010\007\023\014\025\015\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\026\001\001\000\002\001\001\000\006" +
    "\007\023\015\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\035\013\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\040\001\001\000\006\021\043\022\041\001\001" +
    "\000\052\006\045\007\052\011\066\016\076\017\067\020" +
    "\070\021\051\022\041\023\077\024\072\025\044\026\062" +
    "\027\101\030\046\033\065\034\057\035\063\036\060\037" +
    "\055\041\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\015\012\013\013\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\033\211\034\057" +
    "\035\063\036\060\037\055\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\016\201" +
    "\017\067\020\070\021\051\022\041\025\044\026\062\027" +
    "\101\030\046\033\065\034\057\035\063\036\060\037\055" +
    "\041\047\001\001\000\002\001\001\000\004\052\172\001" +
    "\001\000\002\001\001\000\050\006\165\007\052\016\076" +
    "\017\067\020\070\021\051\022\041\023\167\024\166\025" +
    "\044\026\062\027\101\030\046\033\065\034\057\035\063" +
    "\036\060\037\055\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\036\163\037\055\041\047\001\001" +
    "\000\042\016\161\017\067\020\070\021\051\022\041\023" +
    "\162\025\044\026\062\027\101\030\046\033\065\034\057" +
    "\035\063\036\060\037\055\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\033\104\034\057\035\063\036\060\037\055\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\123\035\063\036\060\037\055\041\047\001\001\000\002" +
    "\001\001\000\014\034\110\035\063\036\060\037\055\041" +
    "\047\001\001\000\002\001\001\000\012\035\122\036\060" +
    "\037\055\041\047\001\001\000\012\035\113\036\060\037" +
    "\055\041\047\001\001\000\002\001\001\000\010\036\121" +
    "\037\055\041\047\001\001\000\010\036\120\037\055\041" +
    "\047\001\001\000\010\036\117\037\055\041\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\033\125\034\057" +
    "\035\063\036\060\037\055\040\127\041\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\033\132\034\057\035\063\036\060\037\055\041\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\137\001\001\000\020\031\140\033\141\034\057\035\063" +
    "\036\060\037\055\041\047\001\001\000\002\001\001\000" +
    "\004\032\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\033\151\034\057\035\063\036" +
    "\060\037\055\041\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\153\001\001\000\004\020\154\001\001\000\002\001\001" +
    "\000\040\016\156\017\067\020\070\021\051\022\041\025" +
    "\044\026\062\027\101\030\046\033\065\034\057\035\063" +
    "\036\060\037\055\041\047\001\001\000\002\001\001\000" +
    "\016\033\160\034\057\035\063\036\060\037\055\041\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\016\161\017\067\020\070\021\051\022\041\023" +
    "\170\025\044\026\062\027\101\030\046\033\065\034\057" +
    "\035\063\036\060\037\055\041\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\016\173" +
    "\017\067\020\070\021\051\022\041\025\044\026\062\027" +
    "\101\030\046\033\065\034\057\035\063\036\060\037\055" +
    "\041\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\176\033\141\034\057\035\063\036\060\037\055" +
    "\041\047\001\001\000\004\053\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\203" +
    "\001\001\000\040\016\204\017\067\020\070\021\051\022" +
    "\041\025\044\026\062\027\101\030\046\033\065\034\057" +
    "\035\063\036\060\037\055\041\047\001\001\000\002\001" +
    "\001\000\020\031\206\033\141\034\057\035\063\036\060" +
    "\037\055\041\047\001\001\000\004\047\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\215\001" +
    "\001\000\020\031\216\033\141\034\057\035\063\036\060" +
    "\037\055\041\047\001\001\000\002\001\001\000\004\051" +
    "\220\001\001\000\040\016\221\017\067\020\070\021\051" +
    "\022\041\025\044\026\062\027\101\030\046\033\065\034" +
    "\057\035\063\036\060\037\055\041\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	class Parameter{
		int offset;
		String returnType;
		String value;
		boolean isFunction;
        int vnum;
		public Parameter(int off, String t, boolean is){
			offset = off;
			returnType = t;
			isFunction = is;
            vnum = 0;
		}
		public Parameter(int off, String t, boolean is, int v){
			offset = off;
			returnType = t;
			isFunction = is;
			vnum = v;
		}
	}
	static HashMap<String,HashMap<String, Parameter>> functionMaps; 
	static HashMap<String, Parameter> globalMaps; 
	static int scope;
	static int ncount;
    static BufferedWriter out;
    static Stack<Integer> dowhiles;
	static String ptype;
	static Stack<String> cf;
	static Stack<String> fname;
	static Stack<Integer> offset;
	static int goffset;
	static boolean shouldRet;
    public void syntax_error(Symbol cur_token){
		System.err.println("Syntax error at "+cur_token);
    }
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
		super(lex,sf);
    }

    public static void main(String args[]) {
	    for(int index = 0; index < args.length; index++){
			try {
			    ComplexSymbolFactory csf = new ComplexSymbolFactory();
			    ScannerBuffer lexer = new ScannerBuffer(new Lexer(new BufferedReader(new FileReader(args[index])),csf));
			    Parser p = new Parser(lexer,csf);
			    scope = 0;
			    ptype = "";
			    shouldRet = true;
			    cf = new Stack<String>();
			    fname = new Stack<String>();
                dowhiles = new Stack<Integer>();
			    offset = new Stack<Integer>();
    			offset.push(0);
			    goffset = 0;
			    ncount = 0;
			    functionMaps = new HashMap<String,HashMap<String, Parameter>>();
			    globalMaps = new HashMap<String, Parameter>();
                File ff = new File(args[index].substring(0, args[index].length() - 1) + "s");
                if(ff.exists()) ff.delete();
                ff.createNewFile();
                out = new BufferedWriter(new FileWriter(ff));
			    p.parse();
                out.flush();
                out.close();
			} catch (Exception e) {
			    System.out.println("Error: File " + args[index] + " has invalid sentences.\n");
			}
		} 
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= external_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program external_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // external_declaration ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= EXTERN declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_declaration ::= function_definition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("external_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    System.out.println(".globl _" + id.toString() + "\n_" + id.toString() + ":");
    out.write(".globl _" + id.toString() + "\n_" + id.toString() + ":\n");
    if(id.toString().equals("main")) {
        System.out.println("movl %ebp, %ebx");
        out.write("movl %ebp, %ebx\n");
    }
    System.out.println("pushl %ebp");
    System.out.println("movl %esp, %ebp");
    System.out.println("subl $40, %esp");
    out.write("pushl %ebp\n");
    out.write("movl %esp, %ebp\n");
    out.write("subl $40, %esp\n");
    offset.pop();
    offset.push(0);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_definition ::= type function_declarator decl_glb_fct NT$0 compound_instruction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    offset.pop();
    offset.push(0);
    fname.pop();
    if(shouldRet) {
    System.out.println("leave");
    System.out.println("ret");
    out.write("leave\n");
    out.write("ret\n");
    }
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_glb_fct ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_glb_fct",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= type declarator_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= INT 
            {
              Object RESULT =null;
		ptype = "int";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= STRING 
            {
              Object RESULT =null;
		ptype = "String";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarator_list ::= declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarator_list ::= declarator_list COMMA declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarator ::= IDENT 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(scope == 0) { //global or functions
        goffset -= 4;
        globalMaps.put(id.toString(), new Parameter(goffset, ptype, false));
        
    } else {  //local variables
        int i_off = offset.pop();
        i_off -= 4;
        offset.push(i_off);
        HashMap<String, Parameter> hm = functionMaps.get(fname.peek()); 
        hm.put(id.toString(), new Parameter(offset.peek(), ptype, false));
        
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarator ::= function_declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = id;
    if (!globalMaps.containsKey(id.toString())) {
       globalMaps.put(id.toString(), new Parameter(0, ptype, true, 0));
    }
    fname.push(id.toString());
    
    if(!functionMaps.containsKey(id.toString())) {
	   functionMaps.put(id.toString(), new HashMap<String, Parameter>());
    } 

    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_declarator ::= IDENT PARAL NT$1 PARAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    RESULT = id;
    if (!globalMaps.containsKey(id.toString())) {
       globalMaps.put(id.toString(), new Parameter(0, ptype, true));
    }    fname.push(id.toString());
    if(!functionMaps.containsKey(id.toString())) {
	    functionMaps.put(id.toString(), new HashMap<String, Parameter>());
    } 


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

    int tin = offset.peek();
    tin += 12;
    for (Map.Entry<String, Parameter> entry : functionMaps.get(id.toString()).entrySet()) {
        Parameter x = entry.getValue();
        x.offset = tin - x.offset;
    }
    Parameter t = globalMaps.get(id.toString());
    t.vnum = Math.abs(offset.pop() / 4);
    offset.push(0);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_declarator ::= IDENT PARAL NT$2 parameter_list NT$3 PARAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declarator",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameter_list ::= parameter_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameter_list ::= parameter_list COMMA parameter_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameter_declaration ::= type IDENT 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    HashMap<String, Parameter> hm = functionMaps.get(fname.peek());
    int i_off = offset.pop();
    i_off += 4;
    offset.push(i_off);
    if (!hm.containsKey(id.toString())) {
       hm.put(id.toString(), new Parameter(offset.peek() + 4, ptype, false));
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruction ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruction ::= compound_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruction ::= expression_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruction ::= iteration_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruction ::= select_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruction ::= jump_instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression_instruction ::= expression SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_instruction",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_instruction ::= assignment SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_instruction",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= IDENT ASSIGN expression 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    System.out.println("popl %eax");
    out.write("popl %eax\n");
    HashMap<String, Parameter> hm = functionMaps.get(fname.peek());
    if(hm.containsKey(id.toString())){
        Parameter t = hm.get(id.toString()); 
        int x = t.offset;
        System.out.println("movl %eax, " + x + "(%ebp)");
        out.write("movl %eax, " + x + "(%ebp)\n");
    } else {
        if(globalMaps.containsKey(id.toString())){
            Parameter t = globalMaps.get(id.toString());
            System.out.println("movl %eax, " + t.offset + "(%ebx)");
            out.write("movl %eax, " + t.offset + "(%ebx)\n");
        }
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // compound_instruction ::= block_start declaration_list instruction_list block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // compound_instruction ::= block_start declaration_list block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // compound_instruction ::= block_start instruction_list block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // compound_instruction ::= block_start block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_instruction",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block_start ::= CURLYL 
            {
              Object RESULT =null;
		scope++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_start",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // block_end ::= CURLYR 
            {
              Object RESULT =null;
		scope--;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction_list ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction_list ::= instruction_list instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // select_instruction ::= cond_instruction instruction 
            {
              Object RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
System.out.println("END1" + c + ":");
out.write("END1" + c + ":\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_instruction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$4 ::= 
            {
              Object RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

System.out.println("jmp END2" + c);
System.out.println("END1" + c + ":");
out.write("jmp END2" + c + "\n");
out.write("END1" + c + ":\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // select_instruction ::= cond_instruction instruction ELSE NT$4 instruction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
System.out.println("END2" + c + ":");
out.write("END2" + c + ":\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select_instruction",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Object RESULT =null;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    System.out.println("popl %eax");
    System.out.println("popl %edx");
    out.write("popl %eax\n");
    out.write("popl %edx\n");
    String ifsym = "IF_" + ncount;
    String elsym = "END1" + ncount;
    System.out.println(ifsym + ":");
    System.out.println("cmpl %edx, %eax");
    out.write(ifsym + ":\n");
    out.write("cmpl %edx, %eax\n");
    if (comp_op.toString().equals("==")) {
        System.out.println("je " + elsym);
        out.write("je " + elsym + "\n");
    }
    else if (comp_op.toString().equals("!=")) {
        System.out.println("jne " + elsym);
        out.write("jne " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<")) {
        System.out.println("jl " + elsym);
        out.write("jl " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">")) {
        System.out.println("jg " + elsym);
        out.write("jg " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<=")) {
        System.out.println("jle " + elsym);
        out.write("jle " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">=")) {
        System.out.println("jge " + elsym);
        out.write("jge " + elsym + "\n");
    }
    RESULT = ncount;
    ncount++;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond_instruction ::= IF PARAL condition NT$5 PARAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_instruction",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Object RESULT =null;

    dowhiles.push(ncount);
    ncount++;
    String ifsym = "WHILE_" + dowhiles.peek();
    System.out.println(ifsym + ":");
    out.write(ifsym + ":\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    String ifsym = "WHILE_" + dowhiles.peek();
    String elsym = "WHILEEND" + dowhiles.peek();
    System.out.println("popl %eax");
    System.out.println("popl %edx");
    System.out.println("cmpl %edx, %eax");
    out.write("popl %eax\n");
    out.write("popl %edx\n");
    out.write("cmpl %edx, %eax\n");
    if (comp_op.toString().equals("==")) {
        System.out.println("je " + elsym);
        out.write("je " + elsym + "\n");
    }
    else if (comp_op.toString().equals("!=")) {
        System.out.println("jne " + elsym);
        out.write("jne " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<")) {
        System.out.println("jl " + elsym);
        out.write("jl " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">")) {
        System.out.println("jg " + elsym);
        out.write("jg " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<=")) {
        System.out.println("jle " + elsym);
        out.write("jle " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">=")) {
        System.out.println("jge " + elsym);
        out.write("jge " + elsym + "\n");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // iteration_instruction ::= WHILE PARAL NT$6 condition PARAR NT$7 instruction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    System.out.println("jmp WHILE_" + dowhiles.peek());
    System.out.println("WHILEEND" + dowhiles.peek() + ":");
    out.write("jmp WHILE_" + dowhiles.peek() + "\n");
    out.write("WHILEEND" + dowhiles.pop() + ":\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$8 ::= 
            {
              Object RESULT =null;

    System.out.println("DO_" + ncount + ":");
    out.write("DO_" + ncount + ":\n");
    dowhiles.push(ncount);
    ncount++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    System.out.println("popl %eax");
    System.out.println("popl %edx");
    System.out.println("cmpl %edx, %eax");
    out.write("popl %eax\n");
    out.write("popl %edx\n");
    out.write("cmpl %edx, %eax\n");
    String elsym = "DOEND_" + dowhiles.peek();
    if (comp_op.toString().equals("==")) {
        System.out.println("je " + elsym);
        out.write("je " + elsym + "\n");
    }
    else if (comp_op.toString().equals("!=")) {
        System.out.println("jne " + elsym);
        out.write("jne " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<")) {
        System.out.println("jl " + elsym);
        out.write("jl " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">")) {
        System.out.println("jg " + elsym);
        out.write("jg " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<=")) {
        System.out.println("jle " + elsym);
        out.write("jle " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">=")) {
        System.out.println("jge " + elsym);
        out.write("jge " + elsym + "\n");
    }
    System.out.println("jmp DO_" + dowhiles.peek());
    System.out.println(elsym + ":");
    out.write("jmp DO_" + dowhiles.pop() + "\n");
    out.write(elsym + ":\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // iteration_instruction ::= DO NT$8 instruction WHILE PARAL condition NT$9 PARAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$10 ::= 
            {
              Object RESULT =null;

    dowhiles.push(ncount);
    ncount++;
    String ifsym = "FOR_" + dowhiles.peek();
    System.out.println(ifsym + ":");
    out.write(ifsym + ":\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    String ifsym = "FOR_" + dowhiles.peek();
    String elsym = "FOREND_" + dowhiles.peek();
    System.out.println("popl %eax");
    System.out.println("popl %edx");
    System.out.println("cmpl %edx, %eax");
    out.write("popl %eax\n");
    out.write("popl %edx\n");
    out.write("cmpl %edx, %eax\n");
    if (comp_op.toString().equals("==")) {
        System.out.println("je " + elsym);
        out.write("je " + elsym + "\n");
    }
    else if (comp_op.toString().equals("!=")) {
        System.out.println("jne " + elsym);
        out.write("jne " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<")) {
        System.out.println("jl " + elsym);
        out.write("jl " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">")) {
        System.out.println("jg " + elsym);
        out.write("jg " + elsym + "\n");
    }
    else if (comp_op.toString().equals("<=")) {
        System.out.println("jle " + elsym);
        out.write("jle " + elsym + "\n");
    }
    else if (comp_op.toString().equals(">=")) {
        System.out.println("jge " + elsym);
        out.write("jge " + elsym + "\n");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // iteration_instruction ::= FOR PARAL assignment SEMI NT$10 condition SEMI NT$11 assignment PARAR instruction 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
    System.out.println("jmp FOR_" + dowhiles.peek());
    System.out.println("FOREND_" + dowhiles.peek() + ":");
    out.write("jmp FOR_" + dowhiles.peek() + "\n");
    out.write("FOREND_" + dowhiles.pop() + ":\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_instruction",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$12 ::= 
            {
              Object RESULT =null;

    System.out.println("popl %eax");
    System.out.println("leave");
    System.out.println("ret");
    out.write("popl %eax\n");
    out.write("leave\n");
    out.write("ret\n");
    shouldRet = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // jump_instruction ::= RETURN expression NT$12 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jump_instruction",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= expression comparison_operator expression 
            {
              Object RESULT =null;
		Location comp_opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location comp_opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object comp_op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = comp_op;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // comparison_operator ::= EGAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comparison_operator ::= DIFF 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparison_operator ::= INF 
            {
              Object RESULT =null;
		RESULT = "<";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparison_operator ::= SUP 
            {
              Object RESULT =null;
		RESULT = ">";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparison_operator ::= INFEQUAL 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparison_operator ::= SUPEQUAL 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression_additive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression SHIFTLEFT expression_additive 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("shll %eax");
    System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("shll %eax\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression SHIFTRIGHT expression_additive 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("shrl %eax");
    System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("shrl %eax\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_additive ::= expression_multiplicative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_additive",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_additive ::= expression_additive PLUS expression_multiplicative 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("addl %ecx, %eax");
    System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("addl %ecx, %eax\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_additive",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_additive ::= expression_additive MINUS expression_multiplicative 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("subl %ecx, %eax");
    System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("subl %ecx, %eax\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_additive",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_multiplicative ::= unary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_multiplicative",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_multiplicative ::= expression_multiplicative MULTI unary_expression 
            {
              Object RESULT =null;
		
     System.out.println("popl %ecx");
     System.out.println("popl %eax");
     System.out.println("mull %ecx");
     System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("mull %ecx\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_multiplicative",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_multiplicative ::= expression_multiplicative DIV unary_expression 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("cltd");
    System.out.println("cqo");
    System.out.println("idivl %ecx");
    System.out.println("pushl %eax");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("cltd\n");
    out.write("cqo\n");
    out.write("idivl %ecx\n");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_multiplicative",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_multiplicative ::= expression_multiplicative MODULO unary_expression 
            {
              Object RESULT =null;
		
    System.out.println("popl %ecx");
    System.out.println("popl %eax");
    System.out.println("cltd");
    System.out.println("cqo");
    System.out.println("idivl %ecx");
    System.out.println("pushl %edx");
    out.write("popl %ecx\n");
    out.write("popl %eax\n");
    out.write("cltd\n");
    out.write("cqo\n");
    out.write("idivl %ecx\n");
    out.write("pushl %edx\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_multiplicative",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expression ::= expression_postfixee 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_expression ::= MINUS unary_expression 
            {
              Object RESULT =null;
		
    System.out.println("popl %edx");
    System.out.println("movl $0, %eax");
    System.out.println("subl %edx, %eax");
    System.out.println("pushl %eax");
    out.write("popl %edx\n");
    out.write("movl $0, %eax\n");
    out.write("subl %edx, %eax\n");
    out.write("pushl %eax\n");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_postfixee ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_postfixee",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_postfixee ::= IDENT PARAL argument_expression_list PARAR 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    if(id.toString().equals("printd")) {
        System.out.println("popl %eax");
        System.out.println("movl %eax, (%esp)");
        out.write("popl %eax\n");
        out.write("movl %eax, (%esp)\n");
        System.out.println("call _" + id.toString());
        out.write("call _" + id.toString() + "\n");
        System.out.println("popl %edx");
        out.write("popl %edx\n");
        System.out.println("pushl %eax");
        out.write("pushl %eax\n");
    } else {
        System.out.println("call _" + id.toString());
        out.write("call _" + id.toString() + "\n");
        for(int i = 0; i < globalMaps.get(id.toString()).vnum; i++) {
            System.out.println("popl %edx");
            out.write("popl %edx\n");
        }
        System.out.println("pushl %eax");
        out.write("pushl %eax\n");
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_postfixee",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_postfixee ::= IDENT PARAL PARAR 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    System.out.println("call _" + id.toString());
    out.write("call _" + id.toString() + "\n");
    for(int i = 0; i < globalMaps.get(id.toString()).vnum; i++) {
    	System.out.println("popl %edx");
        out.write("popl %edx\n");
    }
    System.out.println("pushl %eax");
    out.write("pushl %eax\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_postfixee",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // argument_expression_list ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // argument_expression_list ::= argument_expression_list COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_expression_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary_expression ::= IDENT 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(functionMaps.get(fname.peek()).containsKey(id.toString())){
        int tof = functionMaps.get(fname.peek()).get(id.toString()).offset;
        System.out.println("pushl " + tof + "(%ebp)");
        out.write("pushl " + tof + "(%ebp)\n");
    } else {
        int tof = globalMaps.get(id.toString()).offset;
        System.out.println("pushl " + tof + "(%ebx)");
        out.write("pushl " + tof + "(%ebx)\n");
    }
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary_expression ::= CONST_INT 
            {
              Object RESULT =null;
		Location cixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ci = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    System.out.println("pushl $" + ci);
    out.write("pushl $" + ci + "\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary_expression ::= CONST_STRING 
            {
              Object RESULT =null;
		
    System.out.println("pushl $15");
    out.write("pushl $15\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary_expression ::= PARAL expression PARAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
